var documenterSearchIndex = {"docs":
[{"location":"first_steps/#First-steps","page":"First steps","title":"First steps","text":"","category":"section"},{"location":"first_steps/#Using-[NLPModels](https://github.com/JuliaSmoothOptimizers/NLPModels.jl)-standard-modeling-interface","page":"First steps","title":"Using NLPModels standard modeling interface","text":"","category":"section"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"NLPModelsAlgencan is naturally built as an NLPModels interface. Hence, one needs an implementation of an AbstractNLPModel to call the Algencan solver.","category":"page"},{"location":"first_steps/#NLPModelsAlgencan.algencan","page":"First steps","title":"NLPModelsAlgencan.algencan","text":"output = algencan(nlp; kwargs...)\n\nSolves the NLPModel problem nlp using Algencan.\n\nThere is a set of optional keywords arguments allowed, see Optional parameters for the list of options accepted.\n\n\n\n\n\n","category":"function"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"For instance, the NLPModels package provides an automatic differentiation NLPModel, called ADNLPModel, using ForwardDiff to compute the derivatives. For further details, it is recommended to access this tutorial. As an example, the following optimization problem is defined as:","category":"page"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"beginaligned\nmin quad  f(x_1 x_2) = x_1x_2 + 5 \ntextrmst quad  x_1+x_2 leq 5 \n x_1^2+x_2^2=10 \n 0 leq x_1 x_2 leq 5\nendaligned","category":"page"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"And could be modeled as an ADNLModel as follows:","category":"page"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"using ADNLPModels, NLPModelsAlgencan\n\nx0   = [1.0; 1.0]\nf(x) = x[1]*x[2] + 5\nlvar = [0.0; 0.0]\nuvar = [5.0; 5.0]\nc(x) = [x[1] + x[2]; x[1]^2 + x[2]^2]\nlcon = [-Inf; 10.0]\nucon = [5.0;  10.0]\n\nnlp  = ADNLPModel(f, x0, lvar, uvar, c, lcon, ucon)","category":"page"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"Moreover, it is solved with Algencan and displayed the problem statistics, which is provided by a return instance of a GenericExecutionStats:","category":"page"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"using ADNLPModels, NLPModelsAlgencan # hide\nx0   = [1.0;1.0] # hide\nf(x) = x[1]*x[2] + 5 # hide\nlvar = [0.0; 0.0] # hide\nuvar = [5.0; 5.0] # hide\nc(x) = [x[1]+x[2]; x[1]^2+x[2]^2] # hide\nlcon = [-Inf; 10.0] # hide\nucon = [5.0; 10.0] # hide\nnlp  = ADNLPModel(f, x0, lvar, uvar, c, lcon, ucon) # hide\nstats = algencan(nlp)\nprint(stats)","category":"page"},{"location":"first_steps/#Using-[JuMP](https://jump.dev/JuMP.jl/stable/)-modeling-interface","page":"First steps","title":"Using JuMP modeling interface","text":"","category":"section"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"Alternatively, one can use the JuMP interface to model the problem and then solve it with Algencan. This solution is provided by the NLPModelsJuMP package. To model the same problem as before, it could be done as follows:","category":"page"},{"location":"first_steps/","page":"First steps","title":"First steps","text":"using JuMP, NLPModelsJuMP, NLPModelsAlgencan\n\n# Create a new JuMP Model and set Algencan as solver\nmodel = Model(NLPModelsJuMP.Optimizer)\nset_attribute(model, \"solver\", NLPModelsAlgencan.AlgencanSolver)\n\n# Define the model\n@variable(model, 0 ≤ x[1:2] ≤ 5)\nset_start_value(x[1], 1.0)\nset_start_value(x[2], 1.0)\n@objective(model, Min, x[1]*x[2] + 5)\n@constraint(model, x[1] + x[2] ≤ 5)\n@constraint(model, x[1]^2 + x[2]^2 == 10)\n\n# Solve the model and show the solution\noptimize!(model)\n@show value.(x)","category":"page"},{"location":"examples/#Examples-of-usage","page":"Examples of usage","title":"Examples of usage","text":"","category":"section"},{"location":"examples/#Using-NLPModels","page":"Examples of usage","title":"Using NLPModels","text":"","category":"section"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"using ADNLPModels\nusing NLPModelsAlgencan\n\n# Define the HS52 problem\nx0 = [2.0; 2.0; 2.0; 2.0; 2.0]\nf(x) = (4 * x[1] - x[2])^2 + (x[2] + x[3] - 2)^2 + (x[4] - 1)^2 + (x[5] - 1)^2\nc(x) = [x[1] + 3 * x[2]; x[3] + x[4] - 2 * x[5]; x[2] - x[5]]\nlcon = [0.0; 0.0; 0.0]\nucon = [0.0; 0.0; 0.0]\nmodel = ADNLPModel(f, x0, c, lcon, ucon; name=\"hs52_autodiff\")\nstats = algencan(model)\n@show stats.solution","category":"page"},{"location":"examples/#Using-JuMP","page":"Examples of usage","title":"Using JuMP","text":"","category":"section"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"using JuMP\nusing NLPModelsJuMP\nusing NLPModelsAlgencan\n\n# Define a problem usng JuMP\nmodel = Model(NLPModelsJuMP.Optimizer)\nset_attribute(model, \"solver\", NLPModelsAlgencan.AlgencanSolver)\n@variable(model, x[i=1:2], start = [-1.2; 1.0][i])\n@objective(model, Min, (x[1] - 1)^2 + 100 * (x[2] - x[1]^2)^2)\n@constraint(model, x[1]^2 + x[2]^2 == 1)\n\n# Solve problem\noptimize!(model)\n@show values.(x)","category":"page"},{"location":"examples/#Using-[CUTEst](https://github.com/JuliaSmoothOptimizers/CUTEst.jl)-Models","page":"Examples of usage","title":"Using CUTEst Models","text":"","category":"section"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"using NLPModels\nusing CUTEst\nusing NLPModelsAlgencan\n\nset_mastsif()\n\nnlp = CUTEstModel(\"HS6\")\n\nstats = algencan(nlp)\n\nprint(stats)\n\nfinalize(nlp)","category":"page"},{"location":"examples/#Utilizing-a-specification-file","page":"Examples of usage","title":"Utilizing a specification file","text":"","category":"section"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"spec.dat","category":"page"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"FEASIBILITY-TOLERANCE 1.0e-5\nOPTIMALITY-TOLERANCE 1.0e-5\nSTAINF-FEASIBILITY-TOLERANCE 3.162278e-03\nSTAINF-OPTIMALITY-TOLERANCE 3.162278e-08\nACC-FEASIBILITY-THRESHOLD 3.162278e-3\nACC-OPTIMALITY-THRESHOLD 3.162278e-3\nITERATIONS-OUTPUT-DETAIL 10\nNUMBER-OF-ARRAYS-COMPONENTS-IN-OUTPUT 0\nSKIP-ACCELERATION-PROCESS 1","category":"page"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"Code","category":"page"},{"location":"examples/","page":"Examples of usage","title":"Examples of usage","text":"io = open(\"specfnm.dat\", \"w\") # hide\nprintln(io, \"FEASIBILITY-TOLERANCE 1.0e-5\") # hide\nprintln(io, \"OPTIMALITY-TOLERANCE 1.0e-5\") # hide\nprintln(io, \"STAINF-FEASIBILITY-TOLERANCE 3.162278e-03\") # hide\nprintln(io, \"STAINF-OPTIMALITY-TOLERANCE 3.162278e-08\") # hide\nprintln(io, \"ACC-FEASIBILITY-THRESHOLD 3.162278e-3\") # hide\nprintln(io, \"ACC-OPTIMALITY-THRESHOLD 3.162278e-3\") # hide\nprintln(io, \"ITERATIONS-OUTPUT-DETAIL 10\") # hide\nprintln(io, \"NUMBER-OF-ARRAYS-COMPONENTS-IN-OUTPUT 0\") # hide\nprintln(io, \"SKIP-ACCELERATION-PROCESS 1\") # hide\nclose(io) # hide\nusing NLPModels\nusing CUTEst\nusing NLPModelsAlgencan\n\nset_mastsif()\n\nnlp = CUTEstModel(\"HS6\")\n\nstats = algencan(nlp, specfnm=\"specfnm.dat\")\n\nprint(stats)\n\nfinalize(nlp)","category":"page"},{"location":"#NLPModelsAlgencan.jl-documentation","page":"Home","title":"NLPModelsAlgencan.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NLPModelsAlgencan.jl is a NLPModels interface to the Algencan nonlinear solver.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Algencan is a large scale high performance augmented Lagrangian solver written by Ernesto Birgin and Mario Martínez. It has many special features like being able to use the HSL library to speed up the sparse matrix linear algebra and some smart acceleration strategies.","category":"page"},{"location":"#Status","page":"Home","title":"Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At this point this is alpha software. It will only work only with Julia 1.0 or later.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We have not registered the NLPModelsAlgencan.jl package yet. Hence, to add it you will need to give the full URL to the github directory. See examples below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are three main modes of installation, depending on how you want to compile Algencan.","category":"page"},{"location":"#The-preferred-way:-using-HSL","page":"Home","title":"The preferred way: using HSL","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Obs: We only give support for MA57 at this point.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The preferred way to use Algencan is to link it against an HSL function to solve sparse linear systems. To do this you need to grab your copy of MA57 from HSL. It has a free academic license. You should receive a file named hsl_ma57-5.2.0.tar.gz.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All you need to do is to create an environment variable named MA57_SOURCE pointing to this file before installing NLPModelsAlgencan.jl. For example, if the file is located at the /tmp folder, in bash you would do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"export MA57_SOURCE=/tmp/hsl_ma57-5.2.0.tar.gz","category":"page"},{"location":"","page":"Home","title":"Home","text":"After that just install NLPModelsAlgencan.jl from Julia's REPL and import it to force pre-compilation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.x) pkg> add https://github.com/pjssilva/NLPModelsAlgencan.jl\njulia> using NLPModelsAlgencan","category":"page"},{"location":"#The-easy-way","page":"Home","title":"The easy way","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Just type","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.x) pkg> add https://github.com/pjssilva/NLPModelsAlgencan.jl\njulia> using NLPModelsAlgencan","category":"page"},{"location":"","page":"Home","title":"Home","text":"in package mode in Julia's REPL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will download Algencan's code, compile it and make it available to the NLPModelsAlgencan.jl package. However, there is a major caveat here. The Algencan solver will be compiled without any HSL support. This will have a major negative impact on its behavior and performance. You should use HSL whenever you have access to it.","category":"page"},{"location":"#Precompiled-libalgencan.so","page":"Home","title":"Precompiled libalgencan.so","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have your own copy of libalgencan.so (note that you need a shared library), you can use it. Just create an environment variable like below pointing to the directory where the library find resides before installing NLPModelsAlgencan.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"export ALGENCAN_LIB_DIR=/path/where/algencan/libray/is","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can then proceed to install NLPModelsAlgencan.jl from the REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.x) pkg> add https://github.com/pjssilva/NLPModelsAlgencan.jl\njulia> using NLPModelsAlgencan","category":"page"},{"location":"#Hints-to-self-compilation-of-Algencan-with-HSL-libraries","page":"Home","title":"Hints to self compilation of Algencan with HSL libraries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This wiki page documents the steps I used to compile a version of libalgencan.so with HSL support.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See First steps for the fundamental usage. In addition, if there is a need to configure the solver algorithm, you may also check Optional parameters.","category":"page"},{"location":"parameters/#Optional-parameters","page":"Optional parameters","title":"Optional parameters","text":"","category":"section"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"Algencan has a set of parameters that can adjust the solver algorithm.","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"epsfeas: a Float, epsilon_feas, to specify the feasibility tolerance of the Algencan main stopping criterion of convergence.\nepsopt: a Float, epsilon_opt, to specify the optimality tolerance of the Algencan main stopping criterion of convergence.\nefstain: a Float, epsilon_fstain, to specify the feasibility tolerance of the Algencan main stopping criterion to an infeasible point. A possible value for this parameter is sqrtepsilon_feas.\neostain: a Float, epsilon_ostain, to specify the optimality tolerance of the Algencan main stopping criterion to an infeasible point. A possible value for this parameter is epsilon_opt^15.\nefacc: a Float, epsilon_facc, to specify the feasibility tolerance of the Algencan threshold to launch the acceleration process.\neoacc: a Float, epsilon_oacc, to specify the optimality tolerance of the Algencan threshold to launch the acceleration process.\noutputfnm: a String to specify the output filename.\nspecfnm: a String to specify the specification filename, which stores the additional parameters as shown below.","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"These parameters can be defined as optional keywords in the solver function call, e.g:","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"algencan(nlp; epsfeas=1.0e-10, epsopt=1.0e-10, outputfnm='output.dat')","category":"page"},{"location":"parameters/#Additional-optional-parameters","page":"Optional parameters","title":"Additional optional parameters","text":"","category":"section"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"Algencan also provides a set of additional parameters (case-insensitive) that can be defined in the specification file provided by specfnm. The table below lists these parameters.","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"Parameter Additional value\nSKIP-ACCELERATION-PROCESS \nLINEAR-SYSTEMS-SOLVER-IN-ACCELERATION-PROCESS String\nTRUST-REGIONS-INNER-SOLVER String (not required)\nLINEAR-SYSTEMS-SOLVER-IN-TRUST-REGIONS String\nNEWTON-LINE-SEARCH-INNER-SOLVER String (not required)\nLINEAR-SYSTEMS-SOLVER-IN-NEWTON-LINE-SEARCH String\nTRUNCATED-NEWTON-LINE-SEARCH-INNER-SOLVER String (not required)\nMATRIX-VECTOR-PRODUCT-IN-TRUNCATED-NEWTON-LS String\nFIXED-VARIABLES-REMOVAL-AVOIDED \nADD-SLACKS \nOBJECTIVE-AND-CONSTRAINTS-SCALING-AVOIDED \nIGNORE-OBJECTIVE-FUNCTION \nITERATIONS-OUTPUT-DETAIL Int\nNUMBER-OF-ARRAYS-COMPONENTS-IN-OUTPUT Int\nSOLUTION-FILENAME String\nACCELERATION-PROCESS-ITERATIONS-LIMIT Int\nINNER-ITERATIONS-LIMIT Int\nOUTER-ITERATIONS-LIMIT Int\nPENALTY-PARAMETER-INITIAL-VALUE Float\nLARGEST-PENALTY-PARAMETER-ALLOWED Float","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"As an illustration, the following expressions may form part of a valid specification file:","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"# single line comments with '#' are allowed\nSKIP-ACCELERATION-PROCESS\nITERATIONS-OUTPUT-DETAIL 10\n# the syntax is case-insensitive\ninner-iterations-limit 30","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"Furthermore, there is the possibility of these additional parameters being passed by optional keywords in the solver call. In that case, the parameter's name has the character - substituted by _. For instance:","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"# Assign 50 to the parameter `OUTER-ITERATIONS-LIMIT`.\nalgencan(nlp; outer_iterations_limit=50)","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"When there is no additional value associated with the parameter, you can assign an empty string value to the respective keyword. For example:","category":"page"},{"location":"parameters/","page":"Optional parameters","title":"Optional parameters","text":"algencan(nlp; skip_acceleration_process='')","category":"page"}]
}
